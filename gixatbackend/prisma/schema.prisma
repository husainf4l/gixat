generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  firstName         String?
  lastName          String?
  role              Role           @default(USER)
  isActive          Boolean        @default(true)
  livekitToken      String?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  refreshTokens     RefreshToken[]
  socialProvider    String?
  socialId          String?
  profilePictureUrl String?
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

//Gixat is a smart garage management software designed to help auto repair shops and garages manage their operations efficiently. It streamlines tasks like booking, customer management, invoicing, inventory tracking, and job scheduling, all in one easy-to-use platform.

model Client {
  id           String        @id @default(uuid())
  name         String
  carModel     String
  plateNumber  String
  mobileNumber String
  lastVisit    DateTime?
  status       ClientStatus  @default(ACTIVE)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  vehicles     Vehicle[]
  serviceJobs  ServiceJob[]
  Appointment  Appointment[]
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model Vehicle {
  id           String        @id @default(uuid())
  make         String
  model        String
  year         Int
  vin          String?       @unique
  licensePlate String?       @unique
  color        String?
  mileage      Int?
  clientId     String        @map("client_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  serviceJobs  ServiceJob[]
  Appointment  Appointment[]
}

model ServiceType {
  id           String       @id @default(uuid())
  name         String
  description  String?
  defaultPrice Float?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  serviceJobs  ServiceJob[]
}

model ServiceJob {
  id            String      @id @default(uuid())
  status        JobStatus   @default(PENDING)
  startDate     DateTime    @map("start_date")
  endDate       DateTime?   @map("end_date")
  totalCost     Float?      @map("total_cost")
  notes         String?
  vehicleId     String      @map("vehicle_id")
  clientId      String      @map("client_id")
  serviceTypeId String      @map("service_type_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  vehicle       Vehicle     @relation(fields: [vehicleId], references: [id])
  client        Client      @relation(fields: [clientId], references: [id])
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model JobService {
  id           String               @id @default(uuid())
  name         String
  description  String?
  price        Float
  duration     Int // duration in minutes
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now()) @map("created_at")
  updatedAt    DateTime             @updatedAt @map("updated_at")
  appointments AppointmentService[]
}

model Appointment {
  id         String               @id @default(uuid())
  startTime  DateTime             @map("start_time")
  endTime    DateTime             @map("end_time")
  status     AppointmentStatus    @default(SCHEDULED)
  totalPrice Float?               @map("total_price")
  notes      String?
  vehicleId  String               @map("vehicle_id")
  clientId   String               @map("client_id")
  createdAt  DateTime             @default(now()) @map("created_at")
  updatedAt  DateTime             @updatedAt @map("updated_at")
  vehicle    Vehicle              @relation(fields: [vehicleId], references: [id])
  client     Client               @relation(fields: [clientId], references: [id])
  services   AppointmentService[]
}

model AppointmentService {
  id            String      @id @default(uuid())
  appointmentId String      @map("appointment_id")
  serviceId     String      @map("service_id")
  price         Float // Store price at time of appointment
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       JobService  @relation(fields: [serviceId], references: [id])
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([appointmentId, serviceId])
}

enum AppointmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

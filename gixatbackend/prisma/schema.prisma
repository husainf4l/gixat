// This is the schema for GIXAT - Smart Garage Management System
// The database schema defines the core entities and relationships for managing
// auto repair shops and garages operations efficiently

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======= GARAGE MANAGEMENT MODELS =======

model Garage {
  id            String  @id @default(uuid())
  name          String
  logoUrl       String? // Garage branding logo (optional)
  openAiKey     String? // Optional private OpenAI Key
  quickBooksKey String? // Optional private QuickBooks Key

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  users     User[]
  customers Customer[]
  cars      Car[]
  sessions  Session[]

  @@map("garages")
}

// ======= USER MANAGEMENT MODELS =======

model User {
  id                String   @id @default(uuid())
  name              String
  phone             String   @unique
  email             String?  @unique @db.VarChar(255)
  passwordHash      String
  role              UserRole @default(EMPLOYEE)
  socialProvider    String?  @db.VarChar(50)
  socialId          String?  @db.VarChar(255)
  profilePictureUrl String?  @db.Text
  isActive          Boolean  @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  garageId      String
  garage        Garage         @relation(fields: [garageId], references: [id])
  refreshTokens RefreshToken[]

  @@index([email])
  @@index([garageId])
  @@map("users")
}

enum UserRole {
  ADMIN
  EMPLOYEE
}

/// Refresh tokens for maintaining user sessions
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.Text
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  revoked   Boolean  @default(false)

  // Relationships
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}

model Customer {
  id      String  @id @default(uuid())
  name    String
  phone   String  @unique @db.VarChar(15)
  address String? @db.Text
  notes   String? @db.Text

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  garageId String
  garage   Garage    @relation(fields: [garageId], references: [id])
  cars     Car[]
  sessions Session[]

  @@index([phone])
  @@index([garageId])
  @@index([name]) // Adding index for name searches
  @@map("customers")
}

model Car {
  id          String  @id @default(uuid())
  make        String? // Optional (can be filled later)
  model       String? // Optional
  year        Int? // Optional
  plateNumber String? @unique
  vin         String? @unique
  color       String? @db.VarChar(30)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  customerId String
  customer   Customer  @relation(fields: [customerId], references: [id])
  garageId   String
  garage     Garage    @relation(fields: [garageId], references: [id])
  sessions   Session[]

  @@index([plateNumber])
  @@index([vin])
  @@index([customerId])
  @@index([garageId])
  @@map("cars")
}

model Session {
  id           String        @id @default(uuid())
  status       SessionStatus @default(OPEN)
  quickBooksId String? // Estimate ID (optional)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  customerId String
  customer   Customer       @relation(fields: [customerId], references: [id])
  carId      String
  car        Car            @relation(fields: [carId], references: [id])
  garageId   String
  garage     Garage         @relation(fields: [garageId], references: [id])
  entries    SessionEntry[]
  inspection Inspection?
  preJobcard PreJobcard?
  quotation  Quotation?
  jobcard    Jobcard?
  aiCarData  AICarData?

  @@index([status])
  @@index([customerId])
  @@index([carId])
  @@index([garageId])
  @@map("sessions")
}

enum SessionStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_APPROVAL
  APPROVED
  REJECTED
  COMPLETED
  CLOSED
}

model SessionEntry {
  id              String           @id @default(uuid())
  type            SessionEntryType
  originalMessage String? // Original employee text or transcribed voice
  cleanedMessage  String? // AI cleaned text
  photoUrl        String? // Photo if attached
  audioUrl        String? // Voice recording file if available
  createdById     String?

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  sessionId String
  session   Session @relation(fields: [sessionId], references: [id])

  @@index([sessionId])
  @@map("session_entries")
}

enum SessionEntryType {
  NOTE
  PHOTO
  VOICE_NOTE
  QUOTATION_CREATED
  QUOTATION_SENT
  CUSTOMER_APPROVAL
  JOB_STARTED
  JOB_COMPLETED
  SYSTEM_MESSAGE
}

model Inspection {
  id             String  @id @default(uuid())
  notes          String?
  checklist      Json? // Flexible inspection checklist
  testDriveNotes String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  sessionId String  @unique
  session   Session @relation(fields: [sessionId], references: [id])

  @@map("inspections")
}

model PreJobcard {
  id       String  @id @default(uuid())
  services Json? // Suggested repairs list
  notes    String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  sessionId String  @unique
  session   Session @relation(fields: [sessionId], references: [id])

  @@map("pre_jobcards")
}

model Quotation {
  id           String          @id @default(uuid())
  quotationUrl String
  totalAmount  Float
  status       QuotationStatus @default(PENDING)
  sentAt       DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  sessionId String  @unique
  session   Session @relation(fields: [sessionId], references: [id])

  @@map("quotations")
}

enum QuotationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Jobcard {
  id          String    @id @default(uuid())
  startDate   DateTime?
  endDate     DateTime?
  workDetails Json? // Work done details

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  sessionId String  @unique
  session   Session @relation(fields: [sessionId], references: [id])

  @@map("jobcards")
}

model AICarData {
  id          String  @id @default(uuid())
  make        String?
  model       String?
  year        Int?
  vin         String?
  plateNumber String?
  country     String?

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  sessionId String  @unique
  session   Session @relation(fields: [sessionId], references: [id])

  @@map("ai_car_data")
}
